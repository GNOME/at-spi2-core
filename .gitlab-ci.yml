# Continuous Integration configuration for at-spi2-core
#
# For documentation on how this works, see devel-docs/gitlab-ci.md
#
# Full documentation for Gitlab CI: https://docs.gitlab.com/ee/ci/
#
# Introduction to Gitlab CI: https://docs.gitlab.com/ee/ci/quick_start/index.html

# Include the parameters we need from Freedesktop CI Templates
include:
  - local: 'ci/container_builds.yml'

# Stages in the CI pipeline in which jobs will be run
stages:
  - container-build
#  - style-check
  - build
  - analysis
  - docs
  - deploy

# Enable merge request pipelines and avoid duplicate pipelines
# https://docs.gitlab.com/ee/ci/yaml/index.html#switch-between-branch-pipelines-and-merge-request-pipelines
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_COMMIT_BRANCH'

# C coding style checker.
#
# Disabled for now, since we need to decide to reindent all the code first.
#
# style-check-diff:
#   image: fedora:latest
#   stage: style-check
#   script:
#     - dnf install -y clang-tools-extra curl diffutils git
#     - sh -x ./ci/run-style-check.sh


# Default build recipe.
#
# Depends on these variables:
# @MESON_EXTRA_FLAGS: extra arguments for the meson setup invocation
opensuse-x86_64:
  stage: build
  extends:
    - '.container.opensuse@x86_64'
    - '.fdo.distribution-image@opensuse'
  needs: ['opensuse-container@x86_64']
  variables:
    MESON_EXTRA_FLAGS: "--buildtype=debug" # -Dwerror=true
  script:
    - meson setup ${MESON_EXTRA_FLAGS} --prefix /usr _build .
    - meson compile -C _build
    - meson install -C _build
    - mkdir /tmp/test+dir+with+funny+chars
    - export XDG_RUNTIME_DIR=/tmp/test+dir+with+funny+chars # See https://gitlab.gnome.org/GNOME/at-spi2-core/-/issues/48
    - dbus-run-session -- ci/run-tests.sh
  artifacts:
    reports:
      junit: "_build/meson-logs/testlog.junit.xml"
    when: always
    name: "at-spi2-core-${CI_COMMIT_REF_NAME}"
    paths:
      - "${CI_PROJECT_DIR}/_build/meson-logs"
      - "${CI_PROJECT_DIR}/_build/atspi/Atspi-2.0.gir"

fedora-x86_64:
  stage: build
  extends:
    - '.container.fedora@x86_64'
    - '.fdo.distribution-image@fedora'
  needs: ['fedora-container@x86_64']
  variables:
    MESON_EXTRA_FLAGS: "--buildtype=debug -Ddefault_bus=dbus-broker -Ddbus_broker=/usr/bin/dbus-broker-launch" # -Dwerror=true
  script:
    - meson setup ${MESON_EXTRA_FLAGS} --prefix /usr _build .
    - meson compile -C _build
    - meson install -C _build
  artifacts:
    reports:
      junit: "_build/meson-logs/testlog.junit.xml"
    when: always
    name: "at-spi2-core-${CI_COMMIT_REF_NAME}"
    paths:
      - "${CI_PROJECT_DIR}/_build/meson-logs"
      - "${CI_PROJECT_DIR}/_build/atspi/Atspi-2.0.gir"

# Run static analysis on the code.
#
# The logs are part of the compilation stderr.
static-scan:
  stage: analysis
  extends:
    - '.container.opensuse@x86_64'
    - '.fdo.distribution-image@opensuse'
  needs: ['opensuse-container@x86_64']
  variables:
    MESON_EXTRA_FLAGS: "--buildtype=debug -Dintrospection=no -Ddocs=false"
  script:
    - meson setup ${MESON_EXTRA_FLAGS} --prefix /usr _scan_build .
    - ninja -C _scan_build scan-build
  artifacts:
    name: "at-spi2-core-${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    when: always
    paths:
      - "_scan_build/meson-logs/scanbuild"

# Build and run with address sanitizer (asan).
asan-build:
  stage: analysis
  extends:
    - '.container.opensuse@x86_64'
    - '.fdo.distribution-image@opensuse'
  needs: ['opensuse-container@x86_64']
  variables:
    MESON_EXTRA_FLAGS: "--buildtype=debug -Db_sanitize=address -Db_lundef=false -Dintrospection=no -Ddocs=false"
  script:
    - CC=clang meson setup ${MESON_EXTRA_FLAGS} --prefix /usr _build .
    - meson compile -C _build
    - meson install -C _build
    - dbus-run-session -- ci/run-tests.sh
  artifacts:
    name: "at-spi2-core-${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    when: always
    paths:
      - "_asan_build/meson-logs"
  allow_failure: true

# Run the test suite and extract code coverage information.
#
# See the _coverage/ artifact for the HTML report.
coverage:
  stage: analysis
  needs: []
  extends:
    - '.container.opensuse@x86_64'
    - '.fdo.distribution-image@opensuse'
  needs: ['opensuse-container@x86_64']
  variables:
    MESON_EXTRA_FLAGS: "--buildtype=debug -Ddocs=false -Dintrospection=no"
    CFLAGS: "-coverage -ftest-coverage -fprofile-arcs"
  script:
    - meson setup ${MESON_EXTRA_FLAGS} --prefix /usr _build .
    - meson compile -C _build
    - meson install -C _build
    - mkdir -p _coverage
    - lcov --config-file ci/lcovrc --directory _build --capture --initial --output-file "_coverage/${CI_JOB_NAME}-baseline.lcov"
    - dbus-run-session -- ci/run-tests.sh
    - lcov --config-file ci/lcovrc --directory _build --capture --output-file "_coverage/${CI_JOB_NAME}.lcov"
    - bash -x ci/gen-coverage.sh
    - mkdir -p public/
    - cp -r _coverage/coverage public/
  coverage: '/^\s+lines\.+:\s+([\d.]+\%)\s+/'
  artifacts:
    name: "at-spi2-core-${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    expire_in: 2 days
    when: always
    paths:
      - "_build/meson-logs"
      - public

reference:
  stage: docs
  extends:
    - '.container.opensuse@x86_64'
    - '.fdo.distribution-image@opensuse'
  needs: ['opensuse-container@x86_64']
  variables:
    MESON_EXTRA_FLAGS: "--buildtype=release -Ddocs=true"
  script:
    - meson setup ${MESON_EXTRA_FLAGS} --prefix /usr _build .
    - ninja -C _build libatspi-doc atk-doc   # target names generated by meson's gnome.gtkdoc function
    - mkdir _reference
    - mv _build/doc/libatspi/html _reference/libatspi
    - mv _build/doc/atk/html _reference/atk
  artifacts:
    paths:
      - _reference

# Publish the test coverage report
pages:
  stage: deploy
  needs: [ coverage, reference ]
  script:
    - mv _reference/* public/
  artifacts:
    paths:
      - public
  rules:
    - if: ($CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH)
    # Restrict it to the gnome namespace to avoid every fork pushing a set of pages by default
    # - if: ($CI_DEFAULT_BRANCH == $CI_COMMIT_BRANCH && $CI_PROJECT_NAMESPACE == "gnome")